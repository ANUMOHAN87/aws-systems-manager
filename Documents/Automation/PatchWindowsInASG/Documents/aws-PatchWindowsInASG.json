{
  "description": "Systems Manager Automation - Patch Windows instances in an Auto Scaling Group",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": ""
    },
    "InstanceId": {
      "type": "String",
      "description": "ID of the Windows Instance to patch. Only specify when not running from Maintenance Window.",
      "default": "{{TARGET_ID}}"
    },
    "WaitForReboot": {
      "type": "String",
      "description": "(Optional) How long Automation should sleep for, to allow a patched instance to reboot",
      "default": "PT5M"
    },
    "WaitForInstance": {
      "type": "String",
      "description": "(Optional) How long Automation should sleep for, to allow the instance come back into service",
      "default": "PT2M"
    }
  },
  "mainSteps": [
    {
      "name": "createPatchGroupTags",
      "action": "aws:createTags",
      "maxAttempts": 1,
      "onFailure": "Continue",
      "inputs": {
        "ResourceType": "EC2",
        "ResourceIds": [
          "{{InstanceId}}"
        ],
        "Tags": [
          {
            "Key": "AutoPatchInstanceInASG",
            "Value": "InProgress"
          }
        ]
      }
    },
    {
      "name": "EnterStandby",
      "action": "aws:runCommand",
      "maxAttempts": 1,
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{InstanceId}}"
        ],
        "Parameters": {
          "commands": [
            "$asgname=Get-EC2Tag -Filter @{ Name='key';Values='aws:autoscaling:groupName'},@{ Name='resource-id';Values='{{InstanceId}}'} | Select -expand Value",
            "Try { Enter-ASStandby -InstanceId {{InstanceId}} -AutoScalingGroupName $asgname -ShouldDecrementDesiredCapacity 1 } Catch { throw '1' }"
          ]
        }
      }
    },
    {
      "name": "installMissingWindowsUpdates",
      "action": "aws:runCommand",
      "maxAttempts": 1,
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-InstallMissingWindowsUpdates",
        "InstanceIds": [
          "{{InstanceId}}"
        ],
        "Parameters": {
          "UpdateLevel": "Important"
        }
      }
    },
    {
      "name": "SleepToCompleteInstall",
      "action": "aws:sleep",
      "inputs": {
        "Duration": "{{WaitForReboot}}"
      }
    },
    {
      "name": "ExitStandby",
      "action": "aws:runCommand",
      "maxAttempts": 1,
      "onFailure": "Abort",
      "inputs":{
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{InstanceId}}"
        ],
        "Parameters": {
          "commands" : [
            "$asgname=Get-EC2Tag -Filter @{ Name='key';Values='aws:autoscaling:groupName'},@{ Name='resource-id';Values='{{InstanceId}}'} | Select -expand Value",
            "Try { Exit-ASStandby -InstanceId {{InstanceId}} -AutoScalingGroupName $asgname } Catch { throw '1' }"
          ]
        }
      }
    },
    {
      "name": "CompletePatchGroupTags",
      "action": "aws:createTags",
      "maxAttempts": 1,
      "onFailure": "Continue",
      "inputs":{
        "ResourceType": "EC2",
        "ResourceIds": [
          "{{InstanceId}}"
        ],
        "Tags": [
          {
            "Key": "AutoPatchInstanceInASG",
            "Value": "Completed"
          }
        ]
      }
    },
    {
      "name": "SleepBeforeNextInstance",
      "action": "aws:sleep",
      "inputs": {
        "Duration": "{{WaitForInstance}}"
      }
    }
  ]
}
